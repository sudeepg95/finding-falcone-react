{"version":3,"sources":["../node_modules/redux-promise-middleware/dist/es/isPromise.js","../node_modules/redux-promise-middleware/dist/es/index.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","isPromise","value","then","_slicedToArray","arr","i","Array","isArray","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","length","err","sliceIterator","TypeError","_extends","assign","target","arguments","source","key","hasOwnProperty","call","ActionType","Pending","Fulfilled","Rejected","middleware","dispatch","config","defaultTypes","PROMISE_TYPE_SUFFIXES","promiseTypeSuffixes","PROMISE_TYPE_DELIMITER","promiseTypeDelimiter","ref","action","promise","data","payload","PAYLOAD","TYPE","type","META","meta","_PROMISE_TYPE_SUFFIXE","PENDING","FULFILLED","REJECTED","getAction","newPayload","isRejected","join","error","resolvedAction","reason","rejectedAction","createPromise","process","console","warn"],"mappings":"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","file":"static/js/nm.redux-promise-middleware.414f269b.chunk.js","sourcesContent":["var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexport default function isPromise(value) {\n  if (value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {\n    return value && typeof value.then === 'function';\n  }\n\n  return false;\n}","var _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nimport isPromise from './isPromise.js';\n/**\n * For TypeScript support: Remember to check and make sure\n * that `index.d.ts` is also up to date with the implementation.\n */\n\nexport var ActionType = {\n  Pending: 'PENDING',\n  Fulfilled: 'FULFILLED',\n  Rejected: 'REJECTED'\n};\n/**\n * Function: createPromise\n * Description: The main createPromise accepts a configuration\n * object and returns the middleware.\n */\n\nexport function createPromise() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaultTypes = [ActionType.Pending, ActionType.Fulfilled, ActionType.Rejected];\n  var PROMISE_TYPE_SUFFIXES = config.promiseTypeSuffixes || defaultTypes;\n  var PROMISE_TYPE_DELIMITER = config.promiseTypeDelimiter || '_';\n  return function (ref) {\n    var dispatch = ref.dispatch;\n    return function (next) {\n      return function (action) {\n        /**\n         * Instantiate variables to hold:\n         * (1) the promise\n         * (2) the data for optimistic updates\n         */\n        var promise = void 0;\n        var data = void 0;\n        /**\n         * There are multiple ways to dispatch a promise. The first step is to\n         * determine if the promise is defined:\n         * (a) explicitly (action.payload.promise is the promise)\n         * (b) implicitly (action.payload is the promise)\n         * (c) as an async function (returns a promise when called)\n         *\n         * If the promise is not defined in one of these three ways, we don't do\n         * anything and move on to the next middleware in the middleware chain.\n         */\n        // Step 1a: Is there a payload?\n\n        if (action.payload) {\n          var PAYLOAD = action.payload; // Step 1.1: Is the promise implicitly defined?\n\n          if (isPromise(PAYLOAD)) {\n            promise = PAYLOAD;\n          } // Step 1.2: Is the promise explicitly defined?\n          else if (isPromise(PAYLOAD.promise)) {\n              promise = PAYLOAD.promise;\n              data = PAYLOAD.data;\n            } // Step 1.3: Is the promise returned by an async function?\n            else if (typeof PAYLOAD === 'function' || typeof PAYLOAD.promise === 'function') {\n                promise = PAYLOAD.promise ? PAYLOAD.promise() : PAYLOAD();\n                data = PAYLOAD.promise ? PAYLOAD.data : undefined; // Step 1.3.1: Is the return of action.payload a promise?\n\n                if (!isPromise(promise)) {\n                  // If not, move on to the next middleware.\n                  return next(_extends({}, action, {\n                    payload: promise\n                  }));\n                }\n              } // Step 1.4: If there's no promise, move on to the next middleware.\n              else {\n                  return next(action);\n                } // Step 1b: If there's no payload, move on to the next middleware.\n\n        } else {\n          return next(action);\n        }\n        /**\n         * Instantiate and define constants for:\n         * (1) the action type\n         * (2) the action meta\n         */\n\n\n        var TYPE = action.type;\n        var META = action.meta;\n        /**\n         * Instantiate and define constants for the action type suffixes.\n         * These are appended to the end of the action type.\n         */\n\n        var _PROMISE_TYPE_SUFFIXE = _slicedToArray(PROMISE_TYPE_SUFFIXES, 3),\n            PENDING = _PROMISE_TYPE_SUFFIXE[0],\n            FULFILLED = _PROMISE_TYPE_SUFFIXE[1],\n            REJECTED = _PROMISE_TYPE_SUFFIXE[2];\n        /**\n         * Function: getAction\n         * Description: This function constructs and returns a rejected\n         * or fulfilled action object. The action object is based off the Flux\n         * Standard Action (FSA).\n         *\n         * Given an original action with the type FOO:\n         *\n         * The rejected object model will be:\n         * {\n         *   error: true,\n         *   type: 'FOO_REJECTED',\n         *   payload: ...,\n         *   meta: ... (optional)\n         * }\n         *\n         * The fulfilled object model will be:\n         * {\n         *   type: 'FOO_FULFILLED',\n         *   payload: ...,\n         *   meta: ... (optional)\n         * }\n         */\n\n\n        var getAction = function getAction(newPayload, isRejected) {\n          return _extends({\n            // Concatenate the type string property.\n            type: [TYPE, isRejected ? REJECTED : FULFILLED].join(PROMISE_TYPE_DELIMITER)\n          }, newPayload === null || typeof newPayload === 'undefined' ? {} : {\n            payload: newPayload\n          }, META !== undefined ? {\n            meta: META\n          } : {}, isRejected ? {\n            error: true\n          } : {});\n        };\n        /**\n         * Function: handleReject\n         * Calls: getAction to construct the rejected action\n         * Description: This function dispatches the rejected action and returns\n         * the original Error object. Please note the developer is responsible\n         * for constructing and throwing an Error object. The middleware does not\n         * construct any Errors.\n         */\n\n\n        var handleReject = function handleReject(reason) {\n          var rejectedAction = getAction(reason, true);\n          dispatch(rejectedAction);\n          throw reason;\n        };\n        /**\n         * Function: handleFulfill\n         * Calls: getAction to construct the fullfilled action\n         * Description: This function dispatches the fulfilled action and\n         * returns the success object. The success object should\n         * contain the value and the dispatched action.\n         */\n\n\n        var handleFulfill = function handleFulfill() {\n          var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n          var resolvedAction = getAction(value, false);\n          dispatch(resolvedAction);\n          return {\n            value: value,\n            action: resolvedAction\n          };\n        };\n        /**\n         * First, dispatch the pending action:\n         * This object describes the pending state of a promise and will include\n         * any data (for optimistic updates) and/or meta from the original action.\n         */\n\n\n        next(_extends({\n          // Concatenate the type string.\n          type: [TYPE, PENDING].join(PROMISE_TYPE_DELIMITER)\n        }, data !== undefined ? {\n          payload: data\n        } : {}, META !== undefined ? {\n          meta: META\n        } : {}));\n        /**\n         * Second, dispatch a rejected or fulfilled action and move on to the\n         * next middleware.\n         */\n\n        return promise.then(handleFulfill, handleReject);\n      };\n    };\n  };\n}\nexport default function middleware() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      dispatch = _ref.dispatch;\n\n  if (typeof dispatch === 'function') {\n    return createPromise()({\n      dispatch: dispatch\n    });\n  }\n\n  if (process && process.env && (process.env.NODE_ENV === 'development' || 'test')) {\n    // eslint-disable-next-line no-console\n    console.warn('Redux Promise Middleware: As of version 6.0.0, the middleware library supports both preconfigured and custom configured middleware. To use a custom configuration, use the \"createPromise\" export and call this function with your configuration property. To use a preconfiguration, use the default export. For more help, check the upgrading guide: https://docs.psb.design/redux-promise-middleware/upgrade-guides/v6\\n\\nFor custom configuration:\\nimport { createPromise } from \\'redux-promise-middleware\\';\\nconst promise = createPromise({ types: { fulfilled: \\'success\\' } });\\napplyMiddleware(promise);\\n\\nFor preconfiguration:\\nimport promise from \\'redux-promise-middleware\\';\\napplyMiddleware(promise);\\n    ');\n  }\n\n  return null;\n}"],"sourceRoot":""}