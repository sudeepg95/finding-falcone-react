{"version":3,"sources":["Components/Item/ItemComponent.jsx","Components/SelectVehicles/SelectVehiclesComponent.jsx"],"names":["ItemComponent","props","type","item","isSelected","selectItem","className","role","onClick","src","process","name","alt","distance","vehicles","selectedVehicles","selectedVehicleForPlanet","vehiclesDOMMap","map","vehicle","index","max_distance","noOfTimesCurrentVehicleUsed","Object","values","selectedVehicle","filter","selectedVehicleName","length","remainingVehicle","total_no","currentVehicleSelected","key","SelectVehiclesComponent","actions","selectedPlanets","outcome","history","push","fetchVehiclesData","planet","this","selectVehicle","fetchToken","then","findFalcone","totalTime","outcomeError","error","vehiclesList","vehicleError","expeditionDOMMap","React","Component","withRouter","connect","state","dispatch","bindActionCreators","VehicleActions","OutcomeActions"],"mappings":"0FAAA,oBAyFeA,IAvFO,SAAAC,GAAU,IACtBC,EAAuCD,EAAvCC,KAAMC,EAAiCF,EAAjCE,KAAMC,EAA2BH,EAA3BG,WAAYC,EAAeJ,EAAfI,WAChC,GAAa,YAATH,EACF,OACE,yBACEI,UAAU,OACVC,KAAK,eACLC,QAAS,iBAA4B,oBAAfH,GAA6BA,MAElDD,GACC,yBAAKE,UAAU,gBACb,wCAGJ,yBAAKA,UAAU,YACb,yBAAKG,IAAG,UAAKC,yBAAL,YAA+BR,EAA/B,YAAuCC,EAAKQ,KAA5C,QAAwDC,IAAKT,EAAKQ,QAE5E,yBAAKL,UAAU,gBACb,4BAAKH,EAAKQ,MACV,2BACE,0BAAML,UAAU,UAAhB,sBACCH,EAAKU,SACN,0BAAMP,UAAU,UAAhB,oBAOV,GAAa,aAATJ,EAAqB,CAAC,IAChBY,EAA+Bb,EAA/Ba,SAAUC,EAAqBd,EAArBc,iBACZC,EAA2BD,EAAiBZ,EAAKQ,MACnDI,EAAiBZ,EAAKQ,MAAMA,KAC5B,KACEM,EAAiBH,EAASI,KAAI,SAACC,EAASC,GAC5C,GAAIjB,EAAKU,UAAYM,EAAQE,aAAc,CACzC,IAAMC,EAA8BC,OAAOC,OAAOT,GAC/CG,KAAI,SAAAO,GAAe,OAAIA,EAAgBd,QACvCe,QAAO,SAAAC,GAAmB,OAAIA,IAAwBR,EAAQR,QAAMiB,OACjEC,EAAmBV,EAAQW,SAAWR,EACtCS,EACJf,GAA4BA,IAA6BG,EAAQR,KACnE,OACE,yBACEL,UAAU,kBACV0B,IAAG,kBAAaZ,GAChBb,KAAK,eACLC,QAAS,iBAA4B,oBAAfH,GAA6BA,EAAWc,KAE7DY,GACC,yBAAKzB,UAAU,mBACb,wCAGkB,IAArBuB,IAA2BE,GAC1B,yBAAKzB,UAAU,0BAEjB,yBAAKA,UAAU,YACb,yBACEG,IAAG,UAAKC,yBAAL,YAA+BR,EAA/B,YAAuCiB,EAAQR,KAA/C,QACHC,IAAKO,EAAQR,QAGjB,6BACE,4BAAKQ,EAAQR,MACb,2BACE,0BAAML,UAAU,UAAhB,mBACCa,EAAQE,aACT,0BAAMf,UAAU,UAAhB,kBAEF,2BACE,0BAAMA,UAAU,UAAhB,sBACCuB,EACD,0BAAMvB,UAAU,UAAhB,eAMV,OAAO,QAET,OAAO,yBAAKA,UAAU,iBAAiBW,GAGzC,OAAO,O,0sBC9ET,IASMgB,E,YACJ,WAAYhC,GAAQ,IAAD,sBACjB,4CAAMA,IADW,IAGfiC,EAGEjC,EAHFiC,QACWC,EAETlC,EAFFmC,QAAWD,gBACXE,EACEpC,EADFoC,QALe,OAOc,IAA3BF,EAAgBP,OAClBS,EAAQC,KAAK,yBAEbJ,EAAQK,oBAVO,E,2EAcLpB,EAASqB,GACDC,KAAKxC,MAAjBiC,QACAQ,cAAcvB,EAASqB,K,oCAGlB,IAAD,EACiBC,KAAKxC,MAA1BiC,EADI,EACJA,QAASG,EADL,EACKA,QACjBH,EACGS,aACAC,MAAK,kBAAMV,EAAQW,iBACnBD,MAAK,kBAAMP,EAAQC,KAAK,uB,+BAGnB,IAAD,SAIHG,KAAKxC,MAJF,IAELmC,QAAWU,EAFN,EAEMA,UAAWX,EAFjB,EAEiBA,gBAAiBpB,EAFlC,EAEkCA,iBAAyBgC,EAF3D,EAEoDC,MAFpD,IAGL7B,QAAqB8B,EAHhB,EAGMnC,SAA+BoC,EAHrC,EAG8BF,MAE/BG,EAAmBhB,EAAgBjB,KAAI,SAACsB,EAAQpB,GAAT,OAC3C,yBAAKd,UAAU,aAAa0B,IAAG,qBAAgBZ,IAC7C,kBAAC,IAAD,CAAelB,KAAK,UAAUC,KAAMqC,EAAQR,IAAG,iBAAYZ,KAC3D,kBAAC,IAAD,CACElB,KAAK,WACLC,KAAMqC,EACNR,IAAG,mBAAcZ,GACjBN,SAAUmC,EACVlC,iBAAkBA,EAClBV,WAAY,SAAAc,GAAO,OAAI,EAAKuB,cAAcvB,EAASqB,UAIzD,OACE,oCACE,yBAAKlC,UAAU,yBACb,mFACA,sEAA4CwC,IAE9C,yBAAKxC,UAAU,oCACZ6B,EAAgBP,OAAS,EAAIuB,EAAmB,oCAEP,IAA3C5B,OAAOC,OAAOT,GAAkBa,QAC/B,yBAAKtB,UAAU,eACb,4BAAQJ,KAAK,SAASM,QAAS,kBAAM,EAAKqC,gBAA1C,sBAKHK,EAAatB,OAAS,GACrB,yBAAKtB,UAAU,aACb,2BAAI4C,IAGPH,EAAanB,OAAS,GACrB,yBAAKtB,UAAU,aACb,2BAAIyC,S,GArEsBK,IAAMC,WA6E7BC,sBACbC,aAvFsB,SAAAC,GAAK,MAAK,CAChCrC,QAASqC,EAAMrC,QACfiB,QAASoB,EAAMpB,YAGU,SAAAqB,GAAQ,MAAK,CACtCvB,QAASwB,YAAmB,EAAD,GAAMC,IAAN,GAAyBC,KAAkBH,MAiFtEF,CAGEtB","file":"static/js/29.1183eb5b.chunk.js","sourcesContent":["import React from 'react';\n\nconst ItemComponent = props => {\n  const { type, item, isSelected, selectItem } = props;\n  if (type === 'planets') {\n    return (\n      <div\n        className=\"item\"\n        role=\"presentation\"\n        onClick={() => typeof selectItem === 'function' && selectItem()}\n      >\n        {isSelected && (\n          <div className=\"item-overlay\">\n            <p>Selected</p>\n          </div>\n        )}\n        <div className=\"item-img\">\n          <img src={`${process.env.PUBLIC_URL}/${type}/${item.name}.png`} alt={item.name} />\n        </div>\n        <div className=\"item-details\">\n          <h3>{item.name}</h3>\n          <p>\n            <span className=\"bolder\">Distance &nbsp;-&nbsp;</span>\n            {item.distance}\n            <span className=\"normal\">&nbsp;megamiles</span>\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  if (type === 'vehicles') {\n    const { vehicles, selectedVehicles } = props;\n    const selectedVehicleForPlanet = selectedVehicles[item.name]\n      ? selectedVehicles[item.name].name\n      : null;\n    const vehiclesDOMMap = vehicles.map((vehicle, index) => {\n      if (item.distance <= vehicle.max_distance) {\n        const noOfTimesCurrentVehicleUsed = Object.values(selectedVehicles)\n          .map(selectedVehicle => selectedVehicle.name)\n          .filter(selectedVehicleName => selectedVehicleName === vehicle.name).length;\n        const remainingVehicle = vehicle.total_no - noOfTimesCurrentVehicleUsed;\n        const currentVehicleSelected =\n          selectedVehicleForPlanet && selectedVehicleForPlanet === vehicle.name;\n        return (\n          <div\n            className=\"vehicle-details\"\n            key={`vehicle-${index}`}\n            role=\"presentation\"\n            onClick={() => typeof selectItem === 'function' && selectItem(vehicle)}\n          >\n            {currentVehicleSelected && (\n              <div className=\"vehicle-overlay\">\n                <p>Selected</p>\n              </div>\n            )}\n            {remainingVehicle === 0 && !currentVehicleSelected && (\n              <div className=\"vehicle-overlay error\" />\n            )}\n            <div className=\"item-img\">\n              <img\n                src={`${process.env.PUBLIC_URL}/${type}/${vehicle.name}.png`}\n                alt={vehicle.name}\n              />\n            </div>\n            <div>\n              <h3>{vehicle.name}</h3>\n              <p>\n                <span className=\"bolder\">Range &nbsp;-&nbsp;</span>\n                {vehicle.max_distance}\n                <span className=\"normal\">&nbsp;megamiles</span>\n              </p>\n              <p>\n                <span className=\"bolder\">Available&nbsp;-&nbsp;</span>\n                {remainingVehicle}\n                <span className=\"normal\">&nbsp;no&apos;s</span>\n              </p>\n            </div>\n          </div>\n        );\n      }\n      return null;\n    });\n    return <div className=\"vehicles-list\">{vehiclesDOMMap}</div>;\n  }\n\n  return null;\n};\n\nexport default ItemComponent;\n","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport ItemComponent from '../Item/ItemComponent';\nimport { OutcomeActions, VehicleActions } from '../../Store/Actions';\n\nconst mapStateToProps = state => ({\n  vehicle: state.vehicle,\n  outcome: state.outcome\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({ ...VehicleActions, ...OutcomeActions }, dispatch)\n});\n\nclass SelectVehiclesComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    const {\n      actions,\n      outcome: { selectedPlanets },\n      history\n    } = props;\n    if (selectedPlanets.length !== 4) {\n      history.push('/solve/select-planets');\n    } else {\n      actions.fetchVehiclesData();\n    }\n  }\n\n  selectVehicle(vehicle, planet) {\n    const { actions } = this.props;\n    actions.selectVehicle(vehicle, planet);\n  }\n\n  findFalcone() {\n    const { actions, history } = this.props;\n    actions\n      .fetchToken()\n      .then(() => actions.findFalcone())\n      .then(() => history.push('/solve/outcome'));\n  }\n\n  render() {\n    const {\n      outcome: { totalTime, selectedPlanets, selectedVehicles, error: outcomeError },\n      vehicle: { vehicles: vehiclesList, error: vehicleError }\n    } = this.props;\n    const expeditionDOMMap = selectedPlanets.map((planet, index) => (\n      <div className=\"expedition\" key={`expedition-${index}`}>\n        <ItemComponent type=\"planets\" item={planet} key={`planet-${index}`} />\n        <ItemComponent\n          type=\"vehicles\"\n          item={planet}\n          key={`vehicles-${index}`}\n          vehicles={vehiclesList}\n          selectedVehicles={selectedVehicles}\n          selectItem={vehicle => this.selectVehicle(vehicle, planet)}\n        />\n      </div>\n    ));\n    return (\n      <>\n        <div className=\"preface-text noselect\">\n          <h3>Assign vehicles to the planets for the expeditions:</h3>\n          <p>Total time to complete all expeditions: {totalTime}</p>\n        </div>\n        <div className=\"items-box items-box-alt noselect\">\n          {selectedPlanets.length > 0 ? expeditionDOMMap : 'Could not load list of vehicles!'}\n        </div>\n        {Object.values(selectedVehicles).length === 4 && (\n          <div className=\"buttons-box\">\n            <button type=\"button\" onClick={() => this.findFalcone()}>\n              Send expeditions!\n            </button>\n          </div>\n        )}\n        {vehicleError.length > 0 && (\n          <div className=\"error-box\">\n            <p>{vehicleError}</p>\n          </div>\n        )}\n        {outcomeError.length > 0 && (\n          <div className=\"error-box\">\n            <p>{outcomeError}</p>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(SelectVehiclesComponent)\n);\n"],"sourceRoot":""}