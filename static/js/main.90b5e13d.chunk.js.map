{"version":3,"sources":["../external \"React\"","Store/Types/index.js","Store/Types/DefaultTypes.js","Store/Types/PlanetTypes.js","Store/Types/VehicleTypes.js","Store/Types/OutcomeTypes.js","../external \"ReactDOM\"","Store/Actions/PlanetActions.js","Store/Actions/VehicleActions.js","Store/Actions/OutcomeActions.js","Store/Actions/index.js","Router/CreateRouteWithSubRoutes.js","Router/RouteSwitcher.js","Views/Solution/SolutionRoutes.js","Views/Solution/SolutionView.jsx","Router/Routes.js","Components/App/AppComponent.jsx","Store/Middlewares/ClientMiddleware.js","Router/History.js","Store/Reducers/PlanetReducer.js","Store/Reducers/VehicleReducer.js","Store/Reducers/OutcomeReducer.js","Store/Reducers/RootReducer.js","Store/ConfigureStore.js","index.jsx"],"names":["module","exports","React","ReactDOM","urlProtocol","PLANETS_API_URL","process","fetchPlanetsData","types","promise","client","get","clearPlanetItems","type","VEHICLES_API_URL","fetchVehiclesData","clearVehicleItems","TOKEN_API_URL","FIND_API_URL","selectPlanet","planet","result","selectVehicle","vehicle","fetchToken","post","findFalcone","outcome","token","selectedPlanets","selectedVehicles","payload","planet_names","map","name","vehicle_names","Object","values","clearOutcome","CreateRouteWithSubRoutes","route","path","render","props","component","routes","RouteSwitcher","index","key","SolutionRoutes","exact","lazy","SolutionView","titleName","window","location","pathname","className","Routes","LoaderComponent","WrapperComponent","HeaderComponent","FooterComponent","AppComponent","this","planetLoading","loading","vehicleLoading","outcomeLoading","appComponentClassList","push","Suspense","fallback","join","show","PureComponent","withRouter","connect","state","dispatch","actions","bindActionCreators","PlanetActions","VehicleActions","OutcomeActions","clientMiddleware","getState","next","action","rest","REQUEST","SUCCESS","SUCCESS_DEFAULT","FAILURE","FAILURE_DEFAULT","actionPromise","then","data","status","message","error","catch","console","history","createBrowserHistory","initialState","planets","PlanetReducer","vehicles","VehicleReducer","aftermath","totalTime","checkIfPlanetAlreadySelected","incomingPlanet","newSelectedPlanets","existingItemIndex","findIndex","splice","length","updateTotalExpeditionTime","newTimeTaken","forEach","item","expectedSpeedOfExpedition","speed","Number","POSITIVE_INFINITY","distance","OutcomeReducer","planetName","vehicleObj","newSelectedVehicles","currentVehicleUsedCount","selectedVehicle","filter","selectedVehicleName","total_no","appReducer","combineReducers","router","connectRouter","RootReducer","undefined","axios","create","baseURL","withCredentials","headers","Accept","options","logger","enhancers","middleware","ReduxThunk","routerMiddleware","composedEnhancers","compose","applyMiddleware","store","createStore","configureStore","log","basename","document","getElementById"],"mappings":"yEAAAA,EAAOC,QAAUC,O,+BCAjB,4BCA+B,qBDA/B,4BCC+B,qBDD/B,4BEAiC,6BFAjC,4BECyC,qCFDzC,4BEEyC,qCFFzC,4BEIkC,8BFJlC,4BGAkC,8BHAlC,4BGC0C,sCHD1C,4BGE0C,sCHF1C,4BGImC,+BHJnC,4BIAkC,4BJAlC,4BIC0C,oCJD1C,4BIE0C,oCJF1C,4BIIoC,0BJJpC,4BIK4C,kCJL5C,4BIM4C,kCJN5C,4BIQqC,2BJRrC,4BIU6B,oCJV7B,4BIW8B,sC,iBCX9BF,EAAOC,QAAUE,U,ggBCMXC,EAAc,SACdC,EAAe,UAHfC,wCAGe,YAEd,SAASC,IACd,MAAO,CACLC,MAAO,CACLA,IACAA,IACAA,KAEFC,QAAS,SAAAC,GAAM,OAAIA,EAAOC,IAAP,UAAcP,GAAd,OAA4BC,MAI5C,SAASO,IACd,MAAO,CACLC,KAAML,KCpBV,IAIMJ,EAAc,SACdU,EAAgB,UAHhBR,wCAGgB,aAEf,SAASS,IACd,MAAO,CACLP,MAAO,CACLA,IACAA,IACAA,KAEFC,QAAS,SAAAC,GAAM,OAAIA,EAAOC,IAAP,UAAcP,GAAd,OAA4BU,MAI5C,SAASE,IACd,MAAO,CACLH,KAAML,K,okBCpBV,IAIMJ,EAAc,SACda,EAAa,UAHbX,wCAGa,UACbY,EAAY,UAJZZ,wCAIY,SAEX,SAASa,EAAaC,GAC3B,MAAO,CACLP,KAAML,IACNa,OAAO,EAAD,GACDD,IAKF,SAASE,EAAcC,EAASH,GACrC,MAAO,CACLP,KAAML,IACNa,OAAQ,CACND,OAAO,EAAD,GAAOA,GACbG,QAAQ,EAAD,GAAOA,KAKb,SAASC,IACd,MAAO,CACLhB,MAAO,CACLA,IACAA,IACAA,KAEFC,QAAS,SAAAC,GAAM,OAAIA,EAAOe,KAAP,UAAerB,GAAf,OAA6Ba,GAAiB,MAI9D,SAASS,IACd,MAAO,CACLlB,MAAO,CACLA,IACAA,IACAA,KAEFC,QAAS,SAACC,EAAD,GAAwE,IAAD,IAA5DiB,QAAWC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,gBAAiBC,EAAyB,EAAzBA,iBAG/CC,EAAU,CACdH,QACAI,aAJkBH,EAAgBI,KAAI,SAAAb,GAAM,OAAIA,EAAOc,QAKvDC,cAJmBC,OAAOC,OAAOP,GAAkBG,KAAI,SAAAV,GAAO,OAAIA,EAAQW,SAM5E,OAAOxB,EAAOe,KAAP,UAAerB,GAAf,OAA6Bc,GAAgBa,KAKnD,SAASO,IACd,MAAO,CACLzB,KAAML,KC9DV,uG,8LCSe+B,EAJkB,SAAAC,GAAK,OACpC,kBAAC,IAAD,CAAOC,KAAMD,EAAMC,KAAMC,OAAQ,SAAAC,GAAK,OAAI,kBAACH,EAAMI,UAAP,iBAAqBD,EAArB,CAA4BE,OAAQL,EAAMK,cCcvEC,EAbO,SAAAH,GAAU,IACtBE,EAAWF,EAAXE,OACR,OACE,oCACE,kBAAC,IAAD,KACGA,EAAOZ,KAAI,SAACO,EAAOO,GAAR,OACV,kBAAC,EAAD,eAA0BC,IAAKD,GAAWP,UCkBrCS,EApBQ,CACrB,CACER,KAAM,2BACNS,OAAO,EACPN,UAb2B1C,IAAMiD,MAAK,kBACxC,wDAcA,CACEV,KAAM,yBACNG,UAd4B1C,IAAMiD,MAAK,kBACzC,kCAeA,CACEV,KAAM,iBACNG,UAfqB1C,IAAMiD,MAAK,kBAAM,kCAiBxC,CACEV,KAAM,WACNG,UAlBsB1C,IAAMiD,MAAK,kBAAM,wDCa5BC,EAjBM,WACnB,IAKMC,EALS,CACb,wBAAyB,iBACzB,yBAA0B,kBAC1B,iBAAkB,WAEKC,OAAOC,SAASC,UACzC,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aAAaJ,GAC5B,yBAAKI,UAAU,eACb,kBAAC,EAAD,CAAeZ,OAAQI,OCYhBS,EApBA,CACb,CACEjB,KAAM,IACNS,OAAO,EACPN,UARqB1C,IAAMiD,MAAK,kBAAM,wDAUxC,CACEV,KAAM,SACNG,UAAWQ,GAEb,CACEX,KAAM,QACNG,UAfkB1C,IAAMiD,MAAK,kBAAM,kCAiBrC,CACEV,KAAM,IACNG,UAlBsB1C,IAAMiD,MAAK,kBAAM,wD,ukBCI3C,IAAMQ,EAAkBzD,IAAMiD,MAAK,kBAAM,iCACnCS,EAAmB1D,IAAMiD,MAAK,kBAAM,uDACpCU,EAAkB3D,IAAMiD,MAAK,kBAAM,8DACnCW,EAAkB5D,IAAMiD,MAAK,kBAAM,uDAYnCY,E,iLACM,IAAD,EAKHC,KAAKrB,MAHYsB,EAFd,EAEL7C,OAAU8C,QACUC,EAHf,EAGL5C,QAAW2C,QACSE,EAJf,EAILzC,QAAWuC,QAEPA,EAAUD,GAAiBE,GAAkBC,EAC7CC,EAAwB,CAAC,OAE/B,OADIH,GAASG,EAAsBC,KAAK,iBAEtC,oCACE,kBAAC,IAAMC,SAAP,CAAgBC,SAAU,4CACxB,yBAAKf,UAAWY,EAAsBI,KAAK,MACzC,kBAACZ,EAAD,MACA,kBAACD,EAAD,KACE,kBAAC,EAAD,CAAef,OAAQa,KAEzB,kBAACI,EAAD,OAEF,kBAACH,EAAD,CAAiBe,KAAMR,U,GApBNhE,IAAMyE,eA2BlBC,cACbC,aAtCsB,SAAAC,GAAK,MAAK,CAChC1D,OAAQ0D,EAAM1D,OACdG,QAASuD,EAAMvD,QACfI,QAASmD,EAAMnD,YAGU,SAAAoD,GAAQ,MAAK,CACtCC,QAASC,YAAmB,EAAD,GAAMC,IAAN,GAAwBC,IAAxB,GAA2CC,KAAkBL,MA+BxFF,CAGEd,I,ioBCrDW,SAASsB,EAAiB3E,GACvC,OAAO,YAA6B,IAA1BqE,EAAyB,EAAzBA,SAAUO,EAAe,EAAfA,SAClB,OAAO,SAAAC,GAAI,OAAI,SAAAC,GACb,GAAsB,oBAAXA,EACT,OAAOA,EAAOT,EAAUO,GAFH,IAIf7E,EAA4B+E,EAA5B/E,QAASD,EAAmBgF,EAAnBhF,MAAUiF,EAJJ,YAIaD,EAJb,qBAKvB,IAAK/E,EACH,OAAO8E,EAAKC,GANS,kBAQiDhF,EARjD,GAQhBkF,EARgB,YAQPC,OARO,MAQGC,IARH,SAQoBC,OARpB,MAQ8BC,IAR9B,EASvBP,EAAK,KAAKE,EAAN,CAAY5E,KAAM6E,KAEtB,IAAMK,EAAgBtF,EAAQC,EAAD,KAAc4E,MA2B3C,OA1BAS,EACGC,MACC,SAAA3E,GACE,GAAIA,GAAUA,EAAO4E,MAAQ5E,EAAO6E,QAA4B,MAAlB7E,EAAO6E,OACnDX,EAAK,KAAKE,EAAN,CAAYpE,OAAQA,EAAO4E,KAAMpF,KAAM8E,UACtC,GAAItE,GAAUA,EAAO4E,MAAQ5E,EAAO4E,KAAKE,QAAS,CACvD,IAAMC,EAAQ,CACZD,QAAS9E,EAAO4E,KAAKE,SAEvBZ,EAAK,KAAKE,EAAN,CAAYW,QAAOvF,KAAMgF,SACxB,CAILN,EAAK,KAAKE,EAAN,CAAYW,MAHF,CACZD,QAAS,6CAEYtF,KAAMgF,SAGjC,SAAAO,GACEA,EAAMD,QAAU,4CAChBZ,EAAK,KAAKE,EAAN,CAAYW,QAAOvF,KAAMgF,QAGhCQ,OAAM,SAAAD,GACLE,QAAQF,MAAM,oBAAqBA,MAGhCL,K,WCvCEQ,EAFCC,c,yjBCAhB,IAAMC,EAAe,CACnBC,QAAS,GACTxC,QAAS,KACTkC,MAAO,IAyCMO,EAtCO,WAAmC,IAAlC7B,EAAiC,uDAAzB2B,EAAcjB,EAAW,uCAEtD,OAAQA,EAAO3E,MACb,KAAKL,IACH,OAAO,KACFsE,EADL,CAEE4B,QAAS,GACTxC,SAAS,EACTkC,MAAO,KAGX,KAAK5F,IAEH,OAAO,KACFsE,EADL,CAEE4B,QAHOlB,EAAOnE,QAAU,GAIxB6C,SAAS,IAIb,KAAK1D,IACH,OAAO,KACFsE,EADL,CAEEZ,SAAS,EACTkC,MAAOZ,EAAOY,MAAMD,UAGxB,KAAK3F,IACH,OAAO,KACFsE,EADL,CAEE4B,QAAS,KAGb,QACE,OAAO5B,I,yjBCvCb,IAAM2B,EAAe,CACnBG,SAAU,GACV9E,iBAAkB,GAClBoC,QAAS,KACTkC,MAAO,IA0CMS,EAvCQ,WAAmC,IAAlC/B,EAAiC,uDAAzB2B,EAAcjB,EAAW,uCAEvD,OAAQA,EAAO3E,MACb,KAAKL,IACH,OAAO,KACFsE,EADL,CAEE8B,SAAU,GACV9E,iBAAkB,GAClBoC,SAAS,IAGb,KAAK1D,IAEH,OAAO,KACFsE,EADL,CAEE8B,SAHOpB,EAAOnE,QAAU,GAIxB6C,SAAS,IAIb,KAAK1D,IACH,OAAO,KACFsE,EADL,CAEEZ,SAAS,EACTkC,MAAOZ,EAAOY,MAAMD,UAGxB,KAAK3F,IACH,OAAO,KACFsE,EADL,CAEE8B,SAAU,GACV9E,iBAAkB,KAGtB,QACE,OAAOgD,I,kkBC3Cb,IAAM2B,GAAe,CACnB5E,gBAAiB,GACjBC,iBAAkB,GAClBF,MAAO,KACPsC,QAAS,KACT4C,UAAW,KACXC,UAAW,EACXX,MAAO,IAGHY,GAA+B,SAACC,EAAgBpF,GACpD,IAAMqF,EAAkB,YAAOrF,GACzBsF,EAAoBtF,EAAgBuF,WACxC,SAAAhG,GAAM,OAAIA,EAAOc,OAAS+E,EAAe/E,QAE3C,OAAIiF,GAAqB,GACvBD,EAAmBG,OAAOF,EAAmB,GACtC,YAAID,IAETrF,EAAgByF,OAAS,EACrB,GAAN,mBAAWzF,GAAX,OAAiCoF,KAE5B,YAAIpF,IAGP0F,GAA4B,SAAC1F,EAAiBC,GAClD,IAAI0F,EAAe,EAOnB,OANA3F,EAAgB4F,SAAQ,SAAAC,GACtB,IAAMC,EAA4B7F,EAAiB4F,EAAKxF,MACpDJ,EAAiB4F,EAAKxF,MAAM0F,MAC5BC,OAAOC,kBACXN,GAAgBE,EAAKK,SAAWJ,KAE3BH,GAoGMQ,GAjGQ,WAAmC,IACpD3G,EADkByD,EAAiC,uDAAzB2B,GAAcjB,EAAW,uCAEvD,OAAQA,EAAO3E,MACb,KAAKL,IACH,OAAO,MACFsE,EADL,CAEElD,MAAO,KACPsC,SAAS,EACTkC,MAAO,KAGX,KAAK5F,IAEH,OAAO,MACFsE,EADL,CAEElD,OAHFP,EAASmE,EAAOnE,QAAU,IAGVO,MACdsC,SAAS,IAIb,KAAK1D,IACH,OAAO,MACFsE,EADL,CAEEZ,SAAS,EACTkC,MAAOZ,EAAOY,MAAMD,UAGxB,KAAK3F,IACH,OAAO,MACFsE,EADL,CAEEjD,gBAAiB,GACjBC,iBAAkB,GAClBF,MAAO,KACPkF,UAAW,OAGf,KAAKtG,IACHa,EAASmE,EAAOnE,QAAU,CAAEa,KAAM,GAAI6F,SAAU,GAChD,IAAMb,EAAqBF,GAA6B3F,EAAQyD,EAAMjD,iBACtE,OAAO,MACFiD,EADL,CAEEjD,gBAAiBqF,IAIrB,KAAK1G,IAEH,IAAMyH,GADN5G,EAASmE,EAAOnE,QAAU,CAAED,OAAQ,GAAIG,QAAS,KACvBH,OAAOc,MAAQ,GACnCgG,EAAa7G,EAAOE,SAAW,GAC/B4G,EAAmB,MACpBrD,EAAMhD,kBAELsG,EAA0BhG,OAAOC,OAAO8F,GAC3ClG,KAAI,SAAAoG,GAAe,OAAIA,EAAgBnG,QACvCoG,QAAO,SAAAC,GAAmB,OAAIA,IAAwBL,EAAWhG,QAAMoF,OAO1E,OALEc,EAA0B,GAAKF,EAAWM,UACzCL,EAAoBF,IACnBE,EAAoBF,GAAY/F,OAASgG,EAAWhG,QAEtDiG,EAAoBF,GAAcC,GAC7B,MACFpD,EADL,CAEEhD,iBAAkBqG,EAClBpB,UAAWQ,GAA0BzC,EAAMjD,gBAAiBsG,KAIhE,KAAK3H,IACH,OAAO,MACFsE,EADL,CAEEgC,UAAW,KACX5C,SAAS,EACTkC,MAAO,KAGX,KAAK5F,IAEH,OAAO,MACFsE,EADL,CAEEgC,UAHFzF,EAASmE,EAAOnE,QAAU,GAIxB6C,SAAS,IAIb,KAAK1D,IACH,OAAO,MACFsE,EADL,CAEEZ,SAAS,EACTkC,MAAOZ,EAAOY,MAAMD,UAGxB,QACE,OAAOrB,IC1HP2D,GAAaC,YAAgB,CACjCtH,OAAQuF,EACRpF,QAASsF,EACTlF,QAASqG,GACTW,OAAQC,YAAcrC,KAUTsC,GAPK,SAAC/D,EAAOU,GAI1B,MAHoB,oBAAhBA,EAAO3E,OACTiE,OAAQgE,GAEHL,GAAW3D,EAAOU,ICTrB9E,GAASqI,IAAMC,OAAO,CAC1BC,QAAS3I,wCACT4I,iBAAiB,EACjBC,QAAS,CACPC,OAAQ,sB,GAIW,WAAiC,IAAhCC,EAA+B,uDAArB,CAAEC,QAAQ,GACpCC,EAAY,GAUZC,EAAa,CAACC,IAAYC,YAAiBnD,GAAU9F,IAAS4E,EAAiB3E,KACjF2I,EAAQC,OAIZ,IAAMK,EAAoBC,IAAO,WAAP,GACxBC,IAAe,WAAf,EAAmBL,IADK,OAErBD,IAICO,EAAQC,YAAYlB,GAAac,GAEvC,MAAO,CACLG,QACAvD,WCpCuByD,GAAnBF,G,GAAAA,MAAOvD,G,GAAAA,QAGfD,QAAQ2D,IAAR,UAAe3J,QAAf,YAA8CA,eAM9CH,IAASuC,OACP,kBAAC,IAAD,CAAUoH,MAAOA,IACf,kBAAC,IAAD,CAAQvD,QAASA,GAAS2D,SAAS,0BACjC,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.90b5e13d.chunk.js","sourcesContent":["module.exports = React;","export * from './DefaultTypes';\nexport * from './PlanetTypes';\nexport * from './VehicleTypes';\nexport * from './OutcomeTypes';\n","export const SUCCESS_DEFAULT = 'SUCCESS_DEFAULT';\nexport const FAILURE_DEFAULT = 'FAILURE_DEFAULT';\n","export const LOAD_PLANETS_DATA = 'planets/LOAD_DATA_BUNCH';\nexport const LOAD_PLANETS_DATA_SUCCESS = 'planets/LOAD_DATA_BUNCH_SUCCESS';\nexport const LOAD_PLANETS_DATA_FAILURE = 'planets/LOAD_DATA_BUNCH_FAILURE';\n\nexport const CLEAR_PLANET_ITEMS = 'planets/CLEAR_DATA_BUNCH';\n","export const LOAD_VEHICLES_DATA = 'vehicles/LOAD_DATA_BUNCH';\nexport const LOAD_VEHICLES_DATA_SUCCESS = 'vehicles/LOAD_DATA_BUNCH_SUCCESS';\nexport const LOAD_VEHICLES_DATA_FAILURE = 'vehicles/LOAD_DATA_BUNCH_FAILURE';\n\nexport const CLEAR_VEHICLE_ITEMS = 'vehicles/CLEAR_DATA_BUNCH';\n","export const LOAD_OUTCOME_TOKEN = 'outcome/LOAD_DATA_ITEM';\nexport const LOAD_OUTCOME_TOKEN_SUCCESS = 'outcome/LOAD_DATA_ITEM_SUCCESS';\nexport const LOAD_OUTCOME_TOKEN_FAILURE = 'outcome/LOAD_DATA_ITEM_FAILURE';\n\nexport const FETCH_OUTCOME_RESULT = 'outcome/FETCH_RESULT';\nexport const FETCH_OUTCOME_RESULT_SUCCESS = 'outcome/FETCH_RESULT_SUCCESS';\nexport const FETCH_OUTCOME_RESULT_FAILURE = 'outcome/FETCH_RESULT_FAILURE';\n\nexport const CLEAR_OUTCOME_CHOICES = 'outcome/CLEAR_CHOICES';\n\nexport const CHOOSE_PLANET = 'outcome/SELECT_FIRST_DATA_ITEM';\nexport const CHOOSE_VEHICLE = 'outcome/SELECT_SECOND_DATA_ITEM';\n","module.exports = ReactDOM;","import * as types from '../Types';\n\nconst API_URL =\n  process.env.REACT_APP_API_BASE_URL !== ''\n    ? process.env.REACT_APP_API_BASE_URL\n    : window.location.hostname;\nconst urlProtocol = 'https:';\nconst PLANETS_API_URL = `${API_URL}/planets`;\n\nexport function fetchPlanetsData() {\n  return {\n    types: [\n      types.LOAD_PLANETS_DATA,\n      types.LOAD_PLANETS_DATA_SUCCESS,\n      types.LOAD_PLANETS_DATA_FAILURE\n    ],\n    promise: client => client.get(`${urlProtocol}${PLANETS_API_URL}`)\n  };\n}\n\nexport function clearPlanetItems() {\n  return {\n    type: types.CLEAR_PLANET_ITEMS\n  };\n}\n","import * as types from '../Types';\n\nconst API_URL =\n  process.env.REACT_APP_API_BASE_URL !== ''\n    ? process.env.REACT_APP_API_BASE_URL\n    : window.location.hostname;\nconst urlProtocol = 'https:';\nconst VEHICLES_API_URL = `${API_URL}/vehicles`;\n\nexport function fetchVehiclesData() {\n  return {\n    types: [\n      types.LOAD_VEHICLES_DATA,\n      types.LOAD_VEHICLES_DATA_SUCCESS,\n      types.LOAD_VEHICLES_DATA_FAILURE\n    ],\n    promise: client => client.get(`${urlProtocol}${VEHICLES_API_URL}`)\n  };\n}\n\nexport function clearVehicleItems() {\n  return {\n    type: types.CLEAR_PLANET_ITEMS\n  };\n}\n","import * as types from '../Types';\n\nconst API_URL =\n  process.env.REACT_APP_API_BASE_URL !== ''\n    ? process.env.REACT_APP_API_BASE_URL\n    : window.location.hostname;\nconst urlProtocol = 'https:';\nconst TOKEN_API_URL = `${API_URL}/token`;\nconst FIND_API_URL = `${API_URL}/find`;\n\nexport function selectPlanet(planet) {\n  return {\n    type: types.CHOOSE_PLANET,\n    result: {\n      ...planet\n    }\n  };\n}\n\nexport function selectVehicle(vehicle, planet) {\n  return {\n    type: types.CHOOSE_VEHICLE,\n    result: {\n      planet: { ...planet },\n      vehicle: { ...vehicle }\n    }\n  };\n}\n\nexport function fetchToken() {\n  return {\n    types: [\n      types.LOAD_OUTCOME_TOKEN,\n      types.LOAD_OUTCOME_TOKEN_SUCCESS,\n      types.LOAD_OUTCOME_TOKEN_FAILURE\n    ],\n    promise: client => client.post(`${urlProtocol}${TOKEN_API_URL}`, {})\n  };\n}\n\nexport function findFalcone() {\n  return {\n    types: [\n      types.FETCH_OUTCOME_RESULT,\n      types.FETCH_OUTCOME_RESULT_SUCCESS,\n      types.FETCH_OUTCOME_RESULT_FAILURE\n    ],\n    promise: (client, { outcome: { token, selectedPlanets, selectedVehicles } }) => {\n      const planetNames = selectedPlanets.map(planet => planet.name);\n      const vehicleNames = Object.values(selectedVehicles).map(vehicle => vehicle.name);\n      const payload = {\n        token,\n        planet_names: planetNames,\n        vehicle_names: vehicleNames\n      };\n      return client.post(`${urlProtocol}${FIND_API_URL}`, payload);\n    }\n  };\n}\n\nexport function clearOutcome() {\n  return {\n    type: types.CLEAR_OUTCOME_CHOICES\n  };\n}\n","import * as PlanetActions from './PlanetActions';\nimport * as VehicleActions from './VehicleActions';\nimport * as OutcomeActions from './OutcomeActions';\n\nexport { PlanetActions, VehicleActions, OutcomeActions };\n","/* eslint-disable react/jsx-props-no-spreading */\n\nimport React from 'react';\nimport { Route } from 'react-router-dom';\n\nconst CreateRouteWithSubRoutes = route => (\n  <Route path={route.path} render={props => <route.component {...props} routes={route.routes} />} />\n);\n\nexport default CreateRouteWithSubRoutes;\n","/* eslint-disable no-unused-vars */\n/* eslint-disable react/jsx-props-no-spreading */\n\nimport React from 'react';\nimport { Switch } from 'react-router-dom';\nimport CreateRouteWithSubRoutes from './CreateRouteWithSubRoutes';\n\nconst RouteSwitcher = props => {\n  const { routes } = props;\n  return (\n    <>\n      <Switch>\n        {routes.map((route, index) => (\n          <CreateRouteWithSubRoutes key={index} {...route} />\n        ))}\n      </Switch>\n    </>\n  );\n};\n\nexport default RouteSwitcher;\n","import React from 'react';\n\nconst SelectPlanetsComponent = React.lazy(() =>\n  import('../../Components/SelectPlanets/SelectPlanetsComponent')\n);\nconst SelectVehiclesComponent = React.lazy(() =>\n  import('../../Components/SelectVehicles/SelectVehiclesComponent')\n);\nconst OutcomeComponent = React.lazy(() => import('../../Components/Outcome/OutcomeComponent'));\nconst NotFoundComponent = React.lazy(() => import('../../Components/NotFound/NotFoundComponent'));\n\nconst SolutionRoutes = [\n  {\n    path: '/solve(/select-planets)?',\n    exact: true,\n    component: SelectPlanetsComponent\n  },\n  {\n    path: '/solve/select-vehicles',\n    component: SelectVehiclesComponent\n  },\n  {\n    path: '/solve/outcome',\n    component: OutcomeComponent\n  },\n  {\n    path: '/solve/*',\n    component: NotFoundComponent\n  }\n];\n\nexport default SolutionRoutes;\n","import React from 'react';\n\nimport RouteSwitcher from '../../Router/RouteSwitcher';\nimport SolutionRoutes from './SolutionRoutes';\n\nconst SolutionView = () => {\n  const labels = {\n    '/solve/select-planets': 'Select Planets',\n    '/solve/select-vehicles': 'Select Vehicles',\n    '/solve/outcome': 'Outcome'\n  };\n  const titleName = labels[window.location.pathname];\n  return (\n    <div className=\"box\">\n      <div className=\"title-box\">{titleName}</div>\n      <div className=\"box-content\">\n        <RouteSwitcher routes={SolutionRoutes} />\n      </div>\n    </div>\n  );\n};\n\nexport default SolutionView;\n","import React from 'react';\n\nimport { SolutionView } from '../Views/Solution';\n\nconst ProblemComponent = React.lazy(() => import('../Components/Problem/ProblemComponent'));\nconst HelpComponent = React.lazy(() => import('../Components/Help/HelpComponent'));\nconst NotFoundComponent = React.lazy(() => import('../Components/NotFound/NotFoundComponent'));\n\nconst Routes = [\n  {\n    path: '/',\n    exact: true,\n    component: ProblemComponent\n  },\n  {\n    path: '/solve',\n    component: SolutionView\n  },\n  {\n    path: '/help',\n    component: HelpComponent\n  },\n  {\n    path: '*',\n    component: NotFoundComponent\n  }\n];\n\nexport default Routes;\n","import React from 'react';\nimport { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\n\nimport RouteSwitcher from '../../Router/RouteSwitcher';\nimport Routes from '../../Router/Routes';\nimport { PlanetActions, VehicleActions, OutcomeActions } from '../../Store/Actions';\nimport './AppComponent.scss';\n\nconst LoaderComponent = React.lazy(() => import('../Loader/LoaderComponent'));\nconst WrapperComponent = React.lazy(() => import('../Wrapper/WrapperComponent'));\nconst HeaderComponent = React.lazy(() => import('../Header/HeaderComponent'));\nconst FooterComponent = React.lazy(() => import('../Footer/FooterComponent'));\n\nconst mapStateToProps = state => ({\n  planet: state.planet,\n  vehicle: state.vehicle,\n  outcome: state.outcome\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators({ ...PlanetActions, ...VehicleActions, ...OutcomeActions }, dispatch)\n});\n\nclass AppComponent extends React.PureComponent {\n  render() {\n    const {\n      planet: { loading: planetLoading },\n      vehicle: { loading: vehicleLoading },\n      outcome: { loading: outcomeLoading }\n    } = this.props;\n    const loading = planetLoading || vehicleLoading || outcomeLoading;\n    const appComponentClassList = ['app'];\n    if (loading) appComponentClassList.push('loader-active');\n    return (\n      <>\n        <React.Suspense fallback={<div>Loading...</div>}>\n          <div className={appComponentClassList.join(' ')}>\n            <HeaderComponent />\n            <WrapperComponent>\n              <RouteSwitcher routes={Routes} />\n            </WrapperComponent>\n            <FooterComponent />\n          </div>\n          <LoaderComponent show={loading} />\n        </React.Suspense>\n      </>\n    );\n  }\n}\n\nexport default withRouter(\n  connect(\n    mapStateToProps,\n    mapDispatchToProps\n  )(AppComponent)\n);\n","/* eslint-disable no-console */\nimport { SUCCESS_DEFAULT, FAILURE_DEFAULT } from '../Types';\n\nexport default function clientMiddleware(client) {\n  return ({ dispatch, getState }) => {\n    return next => action => {\n      if (typeof action === 'function') {\n        return action(dispatch, getState);\n      }\n      const { promise, types, ...rest } = action;\n      if (!promise) {\n        return next(action);\n      }\n      const [REQUEST, SUCCESS = SUCCESS_DEFAULT, FAILURE = FAILURE_DEFAULT] = types;\n      next({ ...rest, type: REQUEST });\n\n      const actionPromise = promise(client, { ...getState() });\n      actionPromise\n        .then(\n          result => {\n            if (result && result.data && result.status && result.status === 200) {\n              next({ ...rest, result: result.data, type: SUCCESS });\n            } else if (result && result.data && result.data.message) {\n              const error = {\n                message: result.data.message\n              };\n              next({ ...rest, error, type: FAILURE });\n            } else {\n              const error = {\n                message: 'Unexpected error occured, try again later'\n              };\n              next({ ...rest, error, type: FAILURE });\n            }\n          },\n          error => {\n            error.message = 'Unexpected error occured, try again later';\n            next({ ...rest, error, type: FAILURE });\n          }\n        )\n        .catch(error => {\n          console.error('MIDDLEWARE ERROR:', error);\n        });\n\n      return actionPromise;\n    };\n  };\n}\n","import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import * as types from '../Types';\n\nconst initialState = {\n  planets: [],\n  loading: null,\n  error: ''\n};\n\nconst PlanetReducer = (state = initialState, action) => {\n  let result;\n  switch (action.type) {\n    case types.LOAD_PLANETS_DATA:\n      return {\n        ...state,\n        planets: [],\n        loading: true,\n        error: ''\n      };\n\n    case types.LOAD_PLANETS_DATA_SUCCESS: {\n      result = action.result || [];\n      return {\n        ...state,\n        planets: result,\n        loading: false\n      };\n    }\n\n    case types.LOAD_PLANETS_DATA_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error.message\n      };\n\n    case types.CLEAR_PLANET_ITEMS:\n      return {\n        ...state,\n        planets: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default PlanetReducer;\n","/* eslint-disable indent */\nimport * as types from '../Types';\n\nconst initialState = {\n  vehicles: [],\n  selectedVehicles: [],\n  loading: null,\n  error: ''\n};\n\nconst VehicleReducer = (state = initialState, action) => {\n  let result;\n  switch (action.type) {\n    case types.LOAD_VEHICLES_DATA:\n      return {\n        ...state,\n        vehicles: [],\n        selectedVehicles: [],\n        loading: true\n      };\n\n    case types.LOAD_VEHICLES_DATA_SUCCESS: {\n      result = action.result || [];\n      return {\n        ...state,\n        vehicles: result,\n        loading: false\n      };\n    }\n\n    case types.LOAD_VEHICLES_DATA_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error.message\n      };\n\n    case types.CLEAR_VEHICLE_ITEMS:\n      return {\n        ...state,\n        vehicles: [],\n        selectedVehicles: []\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default VehicleReducer;\n","import * as types from '../Types';\n\nconst initialState = {\n  selectedPlanets: [],\n  selectedVehicles: {},\n  token: null,\n  loading: null,\n  aftermath: null,\n  totalTime: 0.0,\n  error: ''\n};\n\nconst checkIfPlanetAlreadySelected = (incomingPlanet, selectedPlanets) => {\n  const newSelectedPlanets = [...selectedPlanets];\n  const existingItemIndex = selectedPlanets.findIndex(\n    planet => planet.name === incomingPlanet.name\n  );\n  if (existingItemIndex > -1) {\n    newSelectedPlanets.splice(existingItemIndex, 1);\n    return [...newSelectedPlanets];\n  }\n  if (selectedPlanets.length < 4) {\n    return [...selectedPlanets, { ...incomingPlanet }];\n  }\n  return [...selectedPlanets];\n};\n\nconst updateTotalExpeditionTime = (selectedPlanets, selectedVehicles) => {\n  let newTimeTaken = 0.0;\n  selectedPlanets.forEach(item => {\n    const expectedSpeedOfExpedition = selectedVehicles[item.name]\n      ? selectedVehicles[item.name].speed\n      : Number.POSITIVE_INFINITY;\n    newTimeTaken += item.distance / expectedSpeedOfExpedition;\n  });\n  return newTimeTaken;\n};\n\nconst OutcomeReducer = (state = initialState, action) => {\n  let result;\n  switch (action.type) {\n    case types.LOAD_OUTCOME_TOKEN:\n      return {\n        ...state,\n        token: null,\n        loading: true,\n        error: ''\n      };\n\n    case types.LOAD_OUTCOME_TOKEN_SUCCESS: {\n      result = action.result || [];\n      return {\n        ...state,\n        token: result.token,\n        loading: false\n      };\n    }\n\n    case types.LOAD_OUTCOME_TOKEN_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error.message\n      };\n\n    case types.CLEAR_OUTCOME_CHOICES:\n      return {\n        ...state,\n        selectedPlanets: [],\n        selectedVehicles: {},\n        token: null,\n        aftermath: null\n      };\n\n    case types.CHOOSE_PLANET: {\n      result = action.result || { name: '', distance: 0 };\n      const newSelectedPlanets = checkIfPlanetAlreadySelected(result, state.selectedPlanets);\n      return {\n        ...state,\n        selectedPlanets: newSelectedPlanets\n      };\n    }\n\n    case types.CHOOSE_VEHICLE: {\n      result = action.result || { planet: {}, vehicle: {} };\n      const planetName = result.planet.name || '';\n      const vehicleObj = result.vehicle || {};\n      const newSelectedVehicles = {\n        ...state.selectedVehicles\n      };\n      const currentVehicleUsedCount = Object.values(newSelectedVehicles)\n        .map(selectedVehicle => selectedVehicle.name)\n        .filter(selectedVehicleName => selectedVehicleName === vehicleObj.name).length;\n      if (\n        currentVehicleUsedCount + 1 <= vehicleObj.total_no ||\n        (newSelectedVehicles[planetName] &&\n          newSelectedVehicles[planetName].name === vehicleObj.name)\n      )\n        newSelectedVehicles[planetName] = vehicleObj;\n      return {\n        ...state,\n        selectedVehicles: newSelectedVehicles,\n        totalTime: updateTotalExpeditionTime(state.selectedPlanets, newSelectedVehicles)\n      };\n    }\n\n    case types.FETCH_OUTCOME_RESULT:\n      return {\n        ...state,\n        aftermath: null,\n        loading: true,\n        error: ''\n      };\n\n    case types.FETCH_OUTCOME_RESULT_SUCCESS: {\n      result = action.result || [];\n      return {\n        ...state,\n        aftermath: result,\n        loading: false\n      };\n    }\n\n    case types.FETCH_OUTCOME_RESULT_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.error.message\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default OutcomeReducer;\n","/* eslint-disable no-param-reassign */\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nimport PlanetReducer from './PlanetReducer';\nimport VehicleReducer from './VehicleReducer';\nimport OutcomeReducer from './OutcomeReducer';\nimport history from '../../Router/History';\n\nconst appReducer = combineReducers({\n  planet: PlanetReducer,\n  vehicle: VehicleReducer,\n  outcome: OutcomeReducer,\n  router: connectRouter(history)\n});\n\nconst RootReducer = (state, action) => {\n  if (action.type === 'DESTROY_SESSION') {\n    state = undefined;\n  }\n  return appReducer(state, action);\n};\n\nexport default RootReducer;\n","import axios from 'axios';\nimport promise from 'redux-promise-middleware';\nimport ReduxThunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\n\nimport clientMiddleware from './Middlewares/ClientMiddleware';\nimport history from '../Router/History';\nimport RootReducer from './Reducers/RootReducer';\n\nconst client = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n  withCredentials: false,\n  headers: {\n    Accept: 'application/json'\n  }\n});\n\nconst configureStore = (options = { logger: true }) => {\n  const enhancers = [];\n\n  if (process.env.REACT_APP_ENV === 'Development') {\n    const { devToolsExtension } = window;\n\n    if (typeof devToolsExtension === 'function') {\n      enhancers.push(devToolsExtension());\n    }\n  }\n\n  const middleware = [ReduxThunk, routerMiddleware(history), promise, clientMiddleware(client)];\n  if (options.logger && process.env.REACT_APP_ENV !== 'Production') {\n    const logger = createLogger({ collapsed: true });\n    middleware.push(logger);\n  }\n  const composedEnhancers = compose(\n    applyMiddleware(...middleware),\n    ...enhancers\n  );\n\n  // Create the store\n  const store = createStore(RootReducer, composedEnhancers);\n\n  return {\n    store,\n    history\n  };\n};\n\nexport default configureStore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ConnectedRouter as Router } from 'connected-react-router';\nimport { Provider } from 'react-redux';\n\nimport AppComponent from './Components/App/AppComponent';\nimport configureStore from './Store/ConfigureStore';\nimport configureWebFontService from './Services/WebFontService';\n\nconst { store, history } = configureStore();\n\n// eslint-disable-next-line no-console\nconsole.log(`${process.env.PROJECT_VERSION}:${process.env.REACT_APP_ENV}`);\n\nif (process.env.REACT_APP_ENV === 'Development') {\n  configureWebFontService();\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history} basename='/finding-falcone-react'>\n      <AppComponent />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}